package com.revenuedepartment.app;

import java.util.ArrayList;

import com.google.gson.Gson;
import com.promptnow.network.PromptnowCommandData;
import com.promptnow.network.model.CommonResponseRD;
import com.revenuedepartment.customview.ButtonCustom;
import com.revenuedepartment.customview.TopBar;
import com.revenuedepartment.datamodels.M_Login;
import com.revenuedepartment.datamodels.M_ResetPasswordQuestionChangeOnlyPassword;
import com.revenuedepartment.datamodels.M_ResetPasswordQuestionConfirm;
import com.revenuedepartment.datamodels.M_ResetPasswordRequest;
import com.revenuedepartment.datapackages.P_ChchkNewUser;
import com.revenuedepartment.function.CheckLang;
import com.revenuedepartment.function.DialogProcess;
import com.revenuedepartment.function.Format;
import com.revenuedepartment.function.PopupDialog;
import com.revenuedepartment.req_datamodels.MRequest_ChangeOnlyPassword;
import com.revenuedepartment.req_datamodels.MRequest_ConfirmQuestion;
import com.revenuedepartment.service.ConnectApi;
import com.revenuedepartment.service.ElementMessage;
import com.revenuedepartment.service.GetAuthen;
import com.revenuedepartment.service.GetMessageError;
import com.revenuedepartment.service.SharedPref;

import android.app.Activity;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.text.InputType;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnFocusChangeListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;

//ResetPasswordNoHaveEmail is Answer Question for get password
public class ResetPasswordNoHaveEmailRequestStep2 extends Activity implements OnClickListener {
	EditText mEditTextForgetPasswordNoHaveEmailStep2Password;
	EditText mEditTextForgetPasswordNoHaveEmailStep2PasswordAgain;
	ButtonCustom mbuttonForgotPasswordNoHaveEmailStep2Submit;
	Button btHintPassword, btHintPasswordAgain;
	TopBar topBar;

	ArrayList<String> array_Question = new ArrayList<String>();
	
	PopupDialog popup = new PopupDialog(ResetPasswordNoHaveEmailRequestStep2.this);
	GetMessageError messageError;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		setView();
		messageError = new GetMessageError(ResetPasswordNoHaveEmailRequestStep2.this);
	}

	public void setView() {
		setContentView(R.layout.reset_password_no_have_email_step2);
		mEditTextForgetPasswordNoHaveEmailStep2Password = (EditText) findViewById(R.id.mEditTextForgetPasswordNoHaveEmailStep2Password);
		mEditTextForgetPasswordNoHaveEmailStep2PasswordAgain = (EditText) findViewById(R.id.mEditTextForgetPasswordNoHaveEmailStep2PasswordAgain);
		mbuttonForgotPasswordNoHaveEmailStep2Submit = (ButtonCustom) findViewById(R.id.mbuttonForgotPasswordNoHaveEmailStep2Submit);
		mbuttonForgotPasswordNoHaveEmailStep2Submit.setDefault();

		btHintPassword = (Button) findViewById(R.id.btHintPassword);
		btHintPasswordAgain = (Button) findViewById(R.id.btHintPasswordAgain);
		mbuttonForgotPasswordNoHaveEmailStep2Submit.setOnClickListener(this);
		btHintPassword.setOnClickListener(this);
		btHintPasswordAgain.setOnClickListener(this);
		mEditTextForgetPasswordNoHaveEmailStep2Password.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD);
		mEditTextForgetPasswordNoHaveEmailStep2PasswordAgain.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD);
		
		topBar = (TopBar) findViewById(R.id.Topbar);
		topBar.setTitle(getString(R.string.lang_th_forgetpassword_step1_topic));
		
		setOnFocusChangeListener();
	}

	private class ChangeOnlyPassword extends AsyncTask<String, Void, M_ResetPasswordQuestionChangeOnlyPassword> {
		DialogProcess dialog = new DialogProcess(ResetPasswordNoHaveEmailRequestStep2.this);
		ConnectApi connApi = new ConnectApi(ResetPasswordNoHaveEmailRequestStep2.this);
		MRequest_ChangeOnlyPassword requestChangeOnlyPassword = new MRequest_ChangeOnlyPassword();
		String JSONObjSend;
		
		public ChangeOnlyPassword() {
			// TODO Auto-generated constructor stub
			
			M_Login mData = null;
			SharedPref pref = new SharedPref(ResetPasswordNoHaveEmailRequestStep2.this);
			if (!pref.getProfile().equals("")){
				mData = GetAuthen.getTempAuthen(pref.getProfile());
			}
			
			requestChangeOnlyPassword.nid = Format.formatNid(mData.getNid());
			requestChangeOnlyPassword.Password = mEditTextForgetPasswordNoHaveEmailStep2Password.getText().toString();
		}

		@Override
		protected void onPreExecute() {
			super.onPreExecute();
			dialog.show();
		}

		@Override
		protected M_ResetPasswordQuestionChangeOnlyPassword doInBackground(String... params) {

			// ### Make json request (nid) ###
//			String mJsonRequest = "";
			// mJsonRequest += "{\"nid\":\"" +
			// mEditTextForgetPasswordNoHaveEmailQuestion.getText() +
			// "\",\"birthDate\":\"" +
			// mEditTextForgetPasswordNoHaveEmailAnswer.getText() +
			// "\",\"version\":\"1.0.0\"}";

			requestChangeOnlyPassword.sessionID = PromptnowCommandData.JSESSIONID;
			JSONObjSend = new Gson().toJson(requestChangeOnlyPassword);
			M_ResetPasswordQuestionChangeOnlyPassword mResetPasswordQuestionChangeOnlyPassword = connApi.mResetPasswordQuestionChangeOnlyPassword(JSONObjSend);
			return mResetPasswordQuestionChangeOnlyPassword;
		}

		@Override
		protected void onPostExecute(M_ResetPasswordQuestionChangeOnlyPassword result) {
			super.onPostExecute(result);
			dialog.dismiss();
			if (result == null) {

			} else {
//				if (result.getResponseStatus().equals("OK")) {
				if (result.responseCode.equals(CommonResponseRD.CODE_SUCCESS)) {
					setResult(Login_E_Filing.RESULT_RESETPASSWORD);
					finish();
				} else {

				}
			}
		}
	}
	private void setOnFocusChangeListener() {
		mEditTextForgetPasswordNoHaveEmailStep2Password.setOnFocusChangeListener(new OnFocusChangeListener() {
			@Override
			public void onFocusChange(View v, boolean hasFocus) {
				if(!hasFocus){
					if (mEditTextForgetPasswordNoHaveEmailStep2Password.getText().toString().equalsIgnoreCase("")) {
						popup.show("", messageError.getFieldMessage(ElementMessage.passwordEmpty));
//						mEditTextForgetPasswordNoHaveEmailStep2Password.requestFocus();
					}
					else if (mEditTextForgetPasswordNoHaveEmailStep2Password.getText().toString().length() != 8) {
						popup.show("", "โปรดใส่ รหัสผ่าน ให้ครบ 8 หลัก");
//						mEditTextForgetPasswordNoHaveEmailStep2Password.requestFocus();
					}
				}
			}
		});
		mEditTextForgetPasswordNoHaveEmailStep2PasswordAgain.setOnFocusChangeListener(new OnFocusChangeListener() {
			@Override
			public void onFocusChange(View v, boolean hasFocus) {
				if(!hasFocus){
					if (mEditTextForgetPasswordNoHaveEmailStep2PasswordAgain.getText().toString().equalsIgnoreCase("")) {
						popup.show("", messageError.getFieldMessage(ElementMessage.newPasswordEmpty));
//						mEditTextForgetPasswordNoHaveEmailStep2PasswordAgain.requestFocus();
					}
					else if (mEditTextForgetPasswordNoHaveEmailStep2PasswordAgain.getText().toString().length() != 8) {
						popup.show("", "โปรดใส่ รหัสผ่านตัวที่ 2 อีกครั้ง ให้ครบ 8 หลัก");
//						mEditTextForgetPasswordNoHaveEmailStep2PasswordAgain.requestFocus();
					}
					else if (!mEditTextForgetPasswordNoHaveEmailStep2Password.getText().toString()
							.equals(mEditTextForgetPasswordNoHaveEmailStep2PasswordAgain.getText().toString())) {
						popup.show("", messageError.getFieldMessage(ElementMessage.passwordNotEqual));
//						mEditTextForgetPasswordNoHaveEmailStep2Password.requestFocus();
					}
				}
			}
		});
	}

	@Override
	public void onClick(View v) {
		// TODO Auto-generated method stub
		if (mbuttonForgotPasswordNoHaveEmailStep2Submit.equals(v)) {

			if (mEditTextForgetPasswordNoHaveEmailStep2Password.getText().toString().equalsIgnoreCase("")) {
//				Toast.makeText(ResetPasswordNoHaveEmailRequestStep2.this, "โปรดใส่ รหัสผ่าน", Toast.LENGTH_SHORT).show();
				popup.show("", messageError.getFieldMessage(ElementMessage.passwordEmpty));
				mEditTextForgetPasswordNoHaveEmailStep2Password.requestFocus();
				return;
			} else if (mEditTextForgetPasswordNoHaveEmailStep2Password.getText().toString().length() != 8) {
//				Toast.makeText(ResetPasswordWithNid.this, "โปรดใส่ รหัสผ่านตัวที่ 2 อีกครั้ง ให้ครบ 8 หลัก", Toast.LENGTH_SHORT).show();
//				popup.show("", messageError.getFieldMessage(ElementMessage.newPasswordWrong));
				popup.show("", "โปรดใส่ รหัสผ่าน ให้ครบ 8 หลัก");
				mEditTextForgetPasswordNoHaveEmailStep2Password.requestFocus();
				return;
			} else if (mEditTextForgetPasswordNoHaveEmailStep2PasswordAgain.getText().toString().equalsIgnoreCase("")) {
//				Toast.makeText(ResetPasswordNoHaveEmailRequestStep2.this, "โปรดใส่ รหัสผ่านตัวที่ 2 อีกครั้ง", Toast.LENGTH_SHORT).show();
				popup.show("", messageError.getFieldMessage(ElementMessage.newPasswordEmpty));
				mEditTextForgetPasswordNoHaveEmailStep2PasswordAgain.requestFocus();
				return;
			} else if (mEditTextForgetPasswordNoHaveEmailStep2PasswordAgain.getText().toString().length() != 8) {
//				Toast.makeText(ResetPasswordWithNid.this, "โปรดใส่ รหัสผ่านตัวที่ 2 อีกครั้ง ให้ครบ 8 หลัก", Toast.LENGTH_SHORT).show();
//				popup.show("", messageError.getFieldMessage(ElementMessage.newPasswordWrong));
				popup.show("", "โปรดใส่ รหัสผ่านตัวที่ 2 อีกครั้ง ให้ครบ 8 หลัก");
				mEditTextForgetPasswordNoHaveEmailStep2PasswordAgain.requestFocus();
				return;
			} else if (!mEditTextForgetPasswordNoHaveEmailStep2Password.getText().toString()
					.equals(mEditTextForgetPasswordNoHaveEmailStep2PasswordAgain.getText().toString())) {
//				Toast.makeText(ResetPasswordNoHaveEmailRequestStep2.this, "รหัสผ่าน2ตัว ไม่เหมือนกัน โปรดใส่อีกครั้ง", Toast.LENGTH_SHORT).show();
				popup.show("", messageError.getFieldMessage(ElementMessage.passwordNotEqual));
				mEditTextForgetPasswordNoHaveEmailStep2Password.requestFocus();
				return;
			} else {
				new ChangeOnlyPassword().execute();
			}
		} else if (btHintPassword.equals(v)) {
			PopupDialog popupPassword = new PopupDialog(ResetPasswordNoHaveEmailRequestStep2.this);
			popupPassword.showMessage("ใส่  Password", new DialogInterface.OnClickListener() {
				@Override
				public void onClick(DialogInterface dialog, int which) {
					// objCheck.get(i).edittext.requestFocus();
				}
			});

			/*
			 * PopupDialog popupPassword = new
			 * PopupDialog(ResetPasswordNoHaveEmailRequestStep2.this);
			 * popupPassword
			 * .alert2Button(CheckLang.check(ResetPasswordNoHaveEmailRequestStep2
			 * .this,
			 * 
			 * getString(R.string.label_want_logout_th),
			 * getString(R.string.label_want_logout_en)), CheckLang.check(
			 * ResetPasswordNoHaveEmailRequestStep2.this,
			 * getString(R.string.label_ok_th),
			 * getString(R.string.label_ok_en)), CheckLang.check(
			 * ResetPasswordNoHaveEmailRequestStep2.this,
			 * getString(R.string.label_cancel_th),
			 * getString(R.string.label_cancel_en)), new
			 * DialogInterface.OnClickListener() {
			 * 
			 * @Override public void onClick(DialogInterface dialog, int which)
			 * { finish(); } }, new DialogInterface.OnClickListener() {
			 * 
			 * @Override public void onClick(DialogInterface dialog, int which)
			 * {
			 * 
			 * } });
			 */
		} else if (btHintPasswordAgain.equals(v)) {
			PopupDialog popupPasswordAgain = new PopupDialog(ResetPasswordNoHaveEmailRequestStep2.this);
			popupPasswordAgain.showMessage("ใส่  Passwordอีกครั้ง", new DialogInterface.OnClickListener() {
				@Override
				public void onClick(DialogInterface dialog, int which) {

				}
			});
		}
	}

	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		super.onActivityResult(requestCode, resultCode, data);
		if (resultCode == Login_E_Filing.RESULT_RESETPASSWORD) {
			setResult(Login_E_Filing.RESULT_RESETPASSWORD);
			finish();
		}
	}
}