package com.revenuedepartment.app;

import android.app.Activity;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.RelativeLayout;

import com.google.gson.Gson;
import com.promptnow.network.PromptnowCommandData;
import com.promptnow.network.model.CommonRequestRD;
import com.promptnow.network.model.CommonResponseRD;
import com.revenuedepartment.customview.TextViewCustom;
import com.revenuedepartment.customview.TopBar;
import com.revenuedepartment.function.CheckLang;
import com.revenuedepartment.function.DialogProcess;
import com.revenuedepartment.function.GetDeviceID;
import com.revenuedepartment.function.PopupDialog;
import com.revenuedepartment.service.ConfigApp;
import com.revenuedepartment.service.ConnectApi;
import com.revenuedepartment.service.GetAuthen;
import com.revenuedepartment.service.JSONElement;
import com.revenuedepartment.service.SavedInstance;
import com.revenuedepartment.service.SharedPref;
import com.revenuedepartment.service.checkOnline;

public class MainEFilling extends Activity implements OnClickListener {

	// Button btFilling, btUserProfile, btPrint, btCheckStatus, btSetting,
	// , btInstructions;
	TextViewCustom txName;
	Button btSetting, btLogout;
	RelativeLayout rlUserProfile, rlPrint, rlCheckStatus, rlFilling, rlInstructions, rlChangePassword, rlPayPnd, rlLogout;

	public static int RESULT_CLOSE = 1000;
	public static int RESULT_SENDSATISFACTION = 1001;

	TopBar topBar;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		this.getDataCenter();
		this.setView();

	}

	private void setView() {
		setContentView(R.layout.mainefilling);
		// btFilling = (Button) findViewById(R.id.btFilling);
		// btUserProfile = (Button) findViewById(R.id.btUserProfile);
		// btPrint = (Button) findViewById(R.id.btPrint);
		// btCheckStatus = (Button) findViewById(R.id.btCheckStatus);
		btSetting = (Button) findViewById(R.id.btSetting);
		btLogout = (Button) findViewById(R.id.btLogout);
		// btInstructions = (Button) findViewById(R.id.btRecommend);
		txName = (TextViewCustom) findViewById(R.id.txName);
		txName.setText(mValue.getString(JSONElement.name) + " " + mValue.getString(JSONElement.surname));

		rlUserProfile = (RelativeLayout) findViewById(R.id.rlUserProfile);
		rlPrint = (RelativeLayout) findViewById(R.id.rlPrint);
		rlInstructions = (RelativeLayout) findViewById(R.id.rlRecommend);
		rlFilling = (RelativeLayout) findViewById(R.id.rlFilling);
		rlCheckStatus = (RelativeLayout) findViewById(R.id.rlCheckStatus);
		rlChangePassword = (RelativeLayout) findViewById(R.id.rlChangePassword);
		rlPayPnd = (RelativeLayout) findViewById(R.id.rlPayPnd);
		rlLogout = (RelativeLayout) findViewById(R.id.rlLogout);
		topBar = (TopBar) findViewById(R.id.Topbar);
		topBar.setImageRight(R.drawable.btn_logout, new OnClickListener() {

			@Override
			public void onClick(View v) {

				
				PopupDialog dialog = new PopupDialog(MainEFilling.this);
				dialog.alert2Button(CheckLang.check(MainEFilling.this, getString(R.string.confirm_filling_th), getString(R.string.confirm_filling_en)),
						CheckLang.check(MainEFilling.this, getString(R.string.label_cancel_th), getString(R.string.label_cancel_en)),
						CheckLang.check(MainEFilling.this, getString(R.string.label_ok_th), getString(R.string.label_ok_en)),
						new DialogInterface.OnClickListener() {

							@Override
							public void onClick(DialogInterface dialog, int which) {
								dialog.dismiss();
							}
						}, new DialogInterface.OnClickListener() {

							@Override
							public void onClick(DialogInterface dialog, int which) {
								if (!checkOnline.check(MainEFilling.this)) {
									new PopupDialog(MainEFilling.this).show("", getString(R.string.alert_no_network));
								} else {
									new requestLogout().execute();
								}
							}
						});
			}
		});

		btSetting.setOnClickListener(this);
		rlUserProfile.setOnClickListener(this);
		rlPrint.setOnClickListener(this);
		rlInstructions.setOnClickListener(this);
		rlFilling.setOnClickListener(this);
		rlCheckStatus.setOnClickListener(this);
		rlChangePassword.setOnClickListener(this);
		rlPayPnd.setOnClickListener(this);
		rlLogout.setOnClickListener(this);
	}

	Bundle mValue = new Bundle();

	private void getDataCenter() {
		mValue = GetAuthen.dataCenter(new SharedPref(MainEFilling.this).getProfile());
		SavedInstance.map.put(SavedInstance.VALUE, mValue);
	}

	@Override
	public void onClick(View v) {
		if (v.equals(rlFilling)) {

			setSelector(rlFilling, R.id.icFilling, R.id.txFilling, R.drawable.icon_pnd91_selection);
			Intent intent = new Intent(MainEFilling.this, PreFilling.class);
			startActivityForResult(intent, 0);
			overridePendingTransition(R.anim.slide_in_right, R.anim.fadeout);
		} else if (v.equals(rlUserProfile)) {
			setSelector(rlUserProfile, R.id.icUserProfile, R.id.txUserProfile, R.drawable.icon_general_profile_selection);
			Intent intent = new Intent(MainEFilling.this, UpdateProfile.class);
			startActivityForResult(intent, 0);
			overridePendingTransition(R.anim.slide_in_right, R.anim.fadeout);
		} else if (v.equals(rlPrint)) {

			setSelector(rlPrint, R.id.icPrint, R.id.txPrint, R.drawable.icon_print_selection);
			Intent intent = new Intent(MainEFilling.this, FormPrint.class);
			startActivityForResult(intent, 0);
			overridePendingTransition(R.anim.slide_in_right, R.anim.fadeout);
		} else if (v.equals(rlCheckStatus)) {
			setSelector(rlCheckStatus, R.id.icCheckStatus, R.id.txCheckStatus, R.drawable.icon_check_taxrefund_selection);
			Intent intent = new Intent(MainEFilling.this, CheckStatusFilling.class);
			startActivityForResult(intent, 0);
			overridePendingTransition(R.anim.slide_in_right, R.anim.fadeout);
		} else if (v.equals(btSetting)) {

		} else if (v.equals(btLogout)) {
			PopupDialog popup = new PopupDialog(MainEFilling.this);
			popup.alert2Button(
					CheckLang.check(MainEFilling.this, getString(R.string.label_want_logout_th), getString(R.string.label_want_logout_en)),
					CheckLang.check(MainEFilling.this, getString(R.string.label_ok_th), getString(R.string.label_ok_en)),
					CheckLang.check(MainEFilling.this, getString(R.string.label_cancel_th), getString(R.string.label_cancel_en)),
					new DialogInterface.OnClickListener() {

						@Override
						public void onClick(DialogInterface dialog, int which) {
							if (!checkOnline.check(MainEFilling.this)) {
								new PopupDialog(MainEFilling.this).show("", getString(R.string.alert_no_network));
							} else {
								new requestLogout().execute();
							}
						}
					}, new DialogInterface.OnClickListener() {

						@Override
						public void onClick(DialogInterface dialog, int which) {

						}
					});
		} else if (v.equals(rlInstructions)) {
			setSelector(rlInstructions, R.id.icSuggestion, R.id.txSuggestion, R.drawable.icon_suggestion_selection);
			Intent intent = new Intent(MainEFilling.this, InstructionsList.class);
			startActivityForResult(intent, 0);
			overridePendingTransition(R.anim.slide_in_right, R.anim.fadeout);
		} else if (v.equals(rlChangePassword)) {
			setSelector(rlChangePassword, R.id.icChangePassword, R.id.txChangePassword, R.drawable.icon_change_password_selection);
			Intent intent = new Intent(MainEFilling.this, ResetPasswordWithNid.class);
			startActivityForResult(intent, 0);
			overridePendingTransition(R.anim.slide_in_right, R.anim.fadeout);
		} else if (v.equals(rlPayPnd)) {
			setSelector(rlPayPnd, R.id.icPayPnd, R.id.txPayPnd, R.drawable.icon_payment_selection);
			int flag = 0;
			if (flag == 0) {
				Intent intent = new Intent(MainEFilling.this, ResultFillingCase.class);
				Bundle data = new Bundle();
				data.putString(ConfigApp.show_back, ConfigApp.show_back);
				intent.putExtras(data);
				startActivityForResult(intent, 0);
				overridePendingTransition(R.anim.slide_in_right, R.anim.fadeout);
			} else if (flag == 1) {

			}
		} else if (v.equals(rlLogout)) {
			setSelector(rlLogout, R.id.icLogout, R.id.txLogout, R.drawable.btn_logout);

		}
	}

	@Override
	public void onBackPressed() {
		super.onBackPressed();
		overridePendingTransition(0, 0);
	}

	private void setSelector(RelativeLayout view, int icon, int text, int background) {
		((ImageView) (ImageView) findViewById(icon)).setImageResource(background);
		((TextViewCustom) (TextViewCustom) findViewById(text)).setTextColor(getResources().getColor(R.color.color_white));
		view.setBackgroundColor(getResources().getColor(R.color.color_bar_top));
	}

	private void setNormal(RelativeLayout view, int icon, int text, int background) {
		((ImageView) (ImageView) findViewById(icon)).setImageResource(background);
		((TextViewCustom) (TextViewCustom) findViewById(text)).setTextColor(getResources().getColor(R.color.color_gray));
		view.setBackgroundColor(0);
	}

	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		super.onActivityResult(requestCode, resultCode, data);
		if (resultCode == MainEFilling.RESULT_CLOSE) {
			Intent intent = new Intent(MainEFilling.this, ResultFilling.class);
			intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
			startActivityForResult(intent, 0);
		} else if (resultCode == MainEFilling.RESULT_SENDSATISFACTION) {
			Intent intent = new Intent(MainEFilling.this, SendSatisfaction.class);
			intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
			startActivityForResult(intent, 0);
		}
		setNormal(rlUserProfile, R.id.icUserProfile, R.id.txUserProfile, R.drawable.icon_general_profile);
		setNormal(rlFilling, R.id.icFilling, R.id.txFilling, R.drawable.icon_pnd91);
		setNormal(rlPrint, R.id.icPrint, R.id.txPrint, R.drawable.icon_print);
		setNormal(rlCheckStatus, R.id.icCheckStatus, R.id.txCheckStatus, R.drawable.icon_check_taxrefund);
		setNormal(rlInstructions, R.id.icSuggestion, R.id.txSuggestion, R.drawable.icon_suggestion);
		setNormal(rlChangePassword, R.id.icChangePassword, R.id.txChangePassword, R.drawable.icon_change_password);
		setNormal(rlPayPnd, R.id.icPayPnd, R.id.txPayPnd, R.drawable.icon_payment);
	}

	private class requestLogout extends AsyncTask<String, Void, CommonResponseRD> {
		PopupDialog popup = new PopupDialog(MainEFilling.this);
		DialogProcess dialog = new DialogProcess(MainEFilling.this);
		ConnectApi connApi = new ConnectApi(MainEFilling.this);
		CommonRequestRD request = new CommonRequestRD();
		String JSONObjSend;

		public requestLogout() {
			request.deviceID = new GetDeviceID(MainEFilling.this).getDeviceID();
		}

		@Override
		protected void onPreExecute() {
			super.onPreExecute();
			dialog.show();
		}

		@Override
		protected CommonResponseRD doInBackground(String... params) {
			request.sessionID = PromptnowCommandData.JSESSIONID;
			JSONObjSend = new Gson().toJson(request);
			CommonResponseRD pRs = connApi.logOut(JSONObjSend);
			return pRs;
		}

		@Override
		protected void onPostExecute(CommonResponseRD result) {
			super.onPostExecute(result);
			dialog.dismiss();
			if (result == null) {
				popup.show("", getString(R.string.system_error));
				
			} else {
				if (result.responseCode.equals(CommonResponseRD.CODE_SUCCESS)) {
					// finish();
					Intent intent = new Intent(MainEFilling.this, Login_E_Filing.class);
					intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
					startActivity(intent);
				} else {
					popup.show(result.responseMessage);
				}
			}
		}
	}
}
